#!/bin/bash

ETH=$(which geth)

# check existance of Ethereum
# ret - if exists returns OK
check_eth() {
    STATUS=""
    if [ -z $ETH ];  
    then
        STATUS="Please, install Ethereum CLI based on GoLang (geth), or if you already have it, set the directory in PATH variable."
    else 
        STATUS="OK"
    fi

    echo $STATUS
}

# runs Ethereum server
# ret - URL,PID
run_server() {
    # execute eth and redirect all output to /dev/null
    if ! $ETH --testnet --exec 'console.log("OK")' attach 2&>/dev/null  
    then
        # run eth webserver 
        $ETH --testnet --ws --fast 2&> /tmp/wallet-server.log & 
        # get server process PID
        PID=`jobs -p`
        echo $1
        # until webserver is not created look for it
        until grep -q 'WebSocket endpoint opened:' /tmp/wallet-server.log
        do
            sleep 3
        done
        # save the URL of server for future requests
        URL=`grep 'WebSocket endpoint opened:'  /tmp/wallet-server.log | sed 's/^.*WebSocket endpoint opened: //'`
        echo $URL,$PID
    fi
}

# get the accounts from server 
# ret - string with accounts
# params: 
#   $1 - SERVER_URL
get_accounts() {
    STRACC=`$ETH --testnet --exec 'eth.accounts' attach $1 | tr -d ',[]'`
    echo $STRACC
}

# concat accounts to text with indexes
# ret - formated string
# params:
#   $1 - array with accounts
accounts2str() {
    ACCOUNTS=${1}
    # concat all accounts for selection
    INDEX=0 # index of account
    TEXT=""
    for ACCOUNT in ${ACCOUNTS[@]}
    do
        TEXT+=$INDEX" "$ACCOUNT"\n"
        INDEX=$(($INDEX+1))
    done
    echo $TEXT
}

# get balance by account name
# ret - BALANCE
# params: 
#   $1 - account name
#   $2 - SERVER_URL
get_balance() {
    INDEX=$1
    SERVER_URL=$2
    ACCOUNTS=${3}
    BALANCE=0

    if [[ $INDEX =~ ^[0-9]+$ ]] && [[ $INDEX < ${#ACCOUNTS[@]} ]];
    then
        BALANCE=`$ETH --testnet --exec "web3.fromWei(eth.getBalance(${ACCOUNTS[$INDEX]}), 'ether');" attach $SERVER_URL`
    else
        BALANCE=-1
    fi

    echo $BALANCE
}

help () {
    printf "Usage: $0 [-a | -i number | -h | -e].\na - show accounts.\ni - get account balance by index.\ne - check Ethereum CLI.\n"
}

# MUST BE IN THE END OF THE MAIN!!!
# ret - ret of kill
# params:
#   $1 - PID
end() {
    # close server
    kill $1
    exit
}

# main function
# params:
#   commandline args
cli_main() {
    if [ ! -z $1 ] && [ $1 = "-h" ];
    then
        help
        exit
    fi

    STATUS=$(check_eth)
    if $([ ! -z $1 ] && [ $1 = "-e" ]) || [ $STATUS != "OK" ];
    then
        echo $STATUS
        exit
    fi
    
    RET=$(run_server)
    SERVER_URL=$(echo $RET | awk -F',' '{print $1}')
    ETH_PID=$(echo $RET | awk -F',' '{print $2}')

    STRACC=$(get_accounts $SERVER_URL)
    ACCOUNTS=($STRACC)

    if [ ! -z $1 ];
    then
        if [ $1 = "-a" ];
        then
            printf "$(accounts2str ${ACCOUNTS[@]})"
            end $ETH_PID
        elif [ $1 = "-i" ]; 
        then
            printf "$(get_balance $2 $SERVER_URL ${ACCOUNTS[@]})\n"
            end $ETH_PID
        fi
    fi

    while true
    do  
        printf "$(accounts2str ${ACCOUNTS[@]})"
        printf "Please, write index of account:\n"
        read INDEX

        BALANCE="$(get_balance $INDEX $SERVER_URL ${ACCOUNTS[@]})"
        printf "Balance of ${ACCOUNTS[$INDEX]}: $BALANCE eth.\n" 

        printf "Do you want to check another account? (Y/N).\n"
        read ANS
        if [ $ANS != "Y" ];
        then
            end $ETH_PID
        fi
    done
}

cli_main "$@"
